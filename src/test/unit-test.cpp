// This file is generated by the discover-tests script

#include "rs-core/unit-test.hpp"
#include <print>
#include <string>
#include <vector>

using namespace RS::UnitTest;

void test_rs_core_global_character_functions();
void test_rs_core_global_range_functions();
void test_rs_core_arithmetic_bitmask_functions();
void test_rs_core_arithmetic_checked_cast();
void test_rs_core_arithmetic_interpolation();
void test_rs_core_arithmetic_append_integers();
void test_rs_core_arithmetic_parse_integers();
void test_rs_core_arithmetic_parse_integers_maybe();
void test_rs_core_arithmetic_parse_floating_point();
void test_rs_core_arithmetic_parse_floating_point_maybe();
void test_rs_core_constants();
void test_rs_core_enum_class();
void test_rs_core_enum_bitmask();
void test_rs_core_format_concepts();
void test_rs_core_format_automation();
void test_rs_core_hash_kernighan();
void test_rs_core_hash_mix();
void test_rs_core_io_cstdio_class();
void test_rs_core_io_cstdio_line_iterator();
void test_rs_core_io_cstdio_read_write_file();
void test_rs_core_iterator_tags();
void test_rs_core_iterator_output_iterators();
void test_rs_core_iterator_input_iterators();
void test_rs_core_iterator_forward_iterators();
void test_rs_core_iterator_bidirectional_iterators();
void test_rs_core_iterator_random_access_iterators();
void test_rs_core_iterator_contiguous_iterators();
void test_rs_core_log_message();
void test_rs_core_log_context();
void test_rs_core_log_function_context();
void test_rs_core_random_pcg_engine();
void test_rs_core_scope_guard();
void test_rs_core_terminal_escape_codes();
void test_rs_core_typename_static();
void test_rs_core_typename_dynamic();
void test_rs_core_uuid_class();
void test_rs_core_uuid_random();
void test_rs_core_version();

int main(int argc, char** argv) {

    main_args = std::vector<std::string>(argv + 1, argv + argc);
    std::println("");
    std::println("{}Running unit tests{}", xhead, xreset);
    std::println("{}{}{}", xrule, rule, xreset);

    call_me_maybe(test_rs_core_global_character_functions, "test_rs_core_global_character_functions");
    call_me_maybe(test_rs_core_global_range_functions, "test_rs_core_global_range_functions");
    call_me_maybe(test_rs_core_arithmetic_bitmask_functions, "test_rs_core_arithmetic_bitmask_functions");
    call_me_maybe(test_rs_core_arithmetic_checked_cast, "test_rs_core_arithmetic_checked_cast");
    call_me_maybe(test_rs_core_arithmetic_interpolation, "test_rs_core_arithmetic_interpolation");
    call_me_maybe(test_rs_core_arithmetic_append_integers, "test_rs_core_arithmetic_append_integers");
    call_me_maybe(test_rs_core_arithmetic_parse_integers, "test_rs_core_arithmetic_parse_integers");
    call_me_maybe(test_rs_core_arithmetic_parse_integers_maybe, "test_rs_core_arithmetic_parse_integers_maybe");
    call_me_maybe(test_rs_core_arithmetic_parse_floating_point, "test_rs_core_arithmetic_parse_floating_point");
    call_me_maybe(test_rs_core_arithmetic_parse_floating_point_maybe, "test_rs_core_arithmetic_parse_floating_point_maybe");
    call_me_maybe(test_rs_core_constants, "test_rs_core_constants");
    call_me_maybe(test_rs_core_enum_class, "test_rs_core_enum_class");
    call_me_maybe(test_rs_core_enum_bitmask, "test_rs_core_enum_bitmask");
    call_me_maybe(test_rs_core_format_concepts, "test_rs_core_format_concepts");
    call_me_maybe(test_rs_core_format_automation, "test_rs_core_format_automation");
    call_me_maybe(test_rs_core_hash_kernighan, "test_rs_core_hash_kernighan");
    call_me_maybe(test_rs_core_hash_mix, "test_rs_core_hash_mix");
    call_me_maybe(test_rs_core_io_cstdio_class, "test_rs_core_io_cstdio_class");
    call_me_maybe(test_rs_core_io_cstdio_line_iterator, "test_rs_core_io_cstdio_line_iterator");
    call_me_maybe(test_rs_core_io_cstdio_read_write_file, "test_rs_core_io_cstdio_read_write_file");
    call_me_maybe(test_rs_core_iterator_tags, "test_rs_core_iterator_tags");
    call_me_maybe(test_rs_core_iterator_output_iterators, "test_rs_core_iterator_output_iterators");
    call_me_maybe(test_rs_core_iterator_input_iterators, "test_rs_core_iterator_input_iterators");
    call_me_maybe(test_rs_core_iterator_forward_iterators, "test_rs_core_iterator_forward_iterators");
    call_me_maybe(test_rs_core_iterator_bidirectional_iterators, "test_rs_core_iterator_bidirectional_iterators");
    call_me_maybe(test_rs_core_iterator_random_access_iterators, "test_rs_core_iterator_random_access_iterators");
    call_me_maybe(test_rs_core_iterator_contiguous_iterators, "test_rs_core_iterator_contiguous_iterators");
    call_me_maybe(test_rs_core_log_message, "test_rs_core_log_message");
    call_me_maybe(test_rs_core_log_context, "test_rs_core_log_context");
    call_me_maybe(test_rs_core_log_function_context, "test_rs_core_log_function_context");
    call_me_maybe(test_rs_core_random_pcg_engine, "test_rs_core_random_pcg_engine");
    call_me_maybe(test_rs_core_scope_guard, "test_rs_core_scope_guard");
    call_me_maybe(test_rs_core_terminal_escape_codes, "test_rs_core_terminal_escape_codes");
    call_me_maybe(test_rs_core_typename_static, "test_rs_core_typename_static");
    call_me_maybe(test_rs_core_typename_dynamic, "test_rs_core_typename_dynamic");
    call_me_maybe(test_rs_core_uuid_class, "test_rs_core_uuid_class");
    call_me_maybe(test_rs_core_uuid_random, "test_rs_core_uuid_random");
    call_me_maybe(test_rs_core_version, "test_rs_core_version");

    std::println("{}{}{}", xrule, rule, xreset);

    if (failures == 0) {
        std::println("{}OK - all tests passed{}", xpass, xreset);
    } else {
        std::println("{}*** Test failures: {}{}", xfail, failures, xreset);
    }

    std::println("");

    return failures;

}
