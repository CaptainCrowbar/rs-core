#!/usr/bin/env bash

# Increment the patch number in the project version

set -o errexit
set -o nounset
set -o pipefail
shopt -s globasciiranges globstar nullglob

if [[ "${TRACE-}" ]]; then
    set -o xtrace
fi

if [[ "${PWD##*/}" =~ build ]]; then
    cd ..
fi

if ! [ -d src ]; then
    echo "*** Source directory not found"
    exit 1
fi

cmakefile=src/CMakeLists.txt
temp=__TEMP__
header=$(ls src/*/version.hpp)

version=$(grep -E '^\s+VERSION \d+\.\d+\.\d+' "$cmakefile" \
    | head -n 1 \
    | grep -Eo '[0-9.]+')

if ! [[ "$version" ]]; then
    echo "*** Version number not found in CMake file"
    exit 1
fi

namespace=$(grep -E '^namespace ' "$header" \
    | grep -Eo 'RS\S*')

if ! [[ "$namespace" ]]; then
    echo "*** Namespace not found in version header"
    exit 1
fi

v1=${version%%.*}
v2=${version#*.}
v2=${v2%.*}
v3=${version##*.}
(( ++v3 ))
echo "Version $v1.$v2.$v3"

sed -E 's!VERSION [0-9]+\.[0-9]+\.[0-9]+!VERSION '"$v1.$v2.$v3"'!' "$cmakefile" > "$temp"
mv "$temp" "$cmakefile"

cat << EOF > $header
// This file is generated by the bump-version script

#pragma once

#include <array>
#include <string>

namespace $namespace {

    inline std::array<int, 3> version() noexcept {
        return {{ $v1, $v2, $v3 }};
    }

    inline std::string version_string() {
        return "$v1.$v2.$v3";
    }

}
EOF
